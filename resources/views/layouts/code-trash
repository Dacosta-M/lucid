// }
            // else {

            //     $username = $username;
            //     $post = new \Lucid\Core\Document($username);
            //     $post = $post->fetchAllRss();
            //     $fcount = 1;
            //     $count = 1;

            //     return view('timeline', ['posts' => $post,'user'=>$user,'fcount'=>$fcount, 'count' => $count]);

            // }

             // if ($username == $user->username) {




     // if(res.subjectError)
      // {
      //   const subjectErrorContainer=document.querySelector('#SubjectError');
      //   subjectErrorContainer.style.display='block';
      //   subjectErrorContainer.innerHTML = res.subjectError;
      // }
      // else
      // {
      //   const subjectErrorContainer=document.querySelector('#SubjectError');
      //   subjectErrorContainer.style.display='none';
      //   subjectErrorContainer.innerHTML = "";
      // }



      //$count = new Ziki\Core\Subscribe();
            //$fcount = $count->fcount();
            //$count = $count->count();
          //  print_r($post);
        //  $count = new \Lucid\Core\Subscribe();


        public function thoughts($username)
    {
      if(!$this->user($username)) {
          return '========404========';
      }

      $user = $this->user($username);
      $post = new \Lucid\Core\Document($username);
      $post = $post->fetchAllRss();
      $fcount = 1;
      $count = 1;

      return view('thoughts', ['posts' => $post,'user'=>$user,'fcount'=>$fcount, 'count' => $count]);

    }


    <div class="col-4 offset-md-1 border-dark ">
      <input type="file" name="file" class="" id="customFile" style="display:none">
      <label class="text-muted form-control p-2 w-100" for="customFile"><i class="icon ion-md-add p-1"></i> Add post Image</label>
    </div>

    public function thoughts($username)
    {
      $user = Auth::user();
      if ($username == $user->username) {

      $username = $user->username;
      $post = new \Lucid\Core\Document($username);

            $post = $post->fetchAllRss();
            //$count = new Ziki\Core\Subscribe();
            //$fcount = $count->fcount();
            //$count = $count->count();
          //  print_r($post);
        //  $count = new \Lucid\Core\Subscribe();
              $fcount = 1;
          $count = 1;
     return view('thoughts', ['posts' => $post,'user'=>$user,'fcount'=>$fcount, 'count' => $count]);
     }else {

       return redirect($user->username.'/thoughts');
     }

    }


    @if (empty($feeds->site_image))
  <img src="{{ asset('img/logo.jpg') }}" class="img-fluid img-thumb" alt="user" />
  @else
  <img src="{{ $feeds->site_image}}" class="img-fluid img-thumb" alt="user" />
  @endif



  <div class="form-row mb-3">
    <div class="col-12">
      <input type="text" name="title" class="form-control" placeholder="Title">
    </div>
  </div>


  //dd($request->all());

      // $this->validate($request, [
      //   'file' => 'image|mimes:jpeg,png,jpg,gif|max:2048'
      // ]);


      // $request->file('file');


      // if(formData.get('bio') !==""){
            //    document.querySelector('#user-bio').innerHTML = formData.get('bio');
            // }else {
            //   document.querySelector('#user-bio').innerHTML = ' Be The First To Get The Latest Posts From Me By Clicking On The Follow Me Button Below';
            // }

      //Auth::routes();
    // Route::get('/', 'HomeController@index');
    // Route::get('/home', 'HomeController@index');
    //Route::get('/timeline', 'HomeController@timeline');


    //Route::post('/addrss','ExtRssController@add');

// Route::get('posts', function () {
//     return view('posts');
// });


<!-- @isset($post['crawlerImage'])
        <img src="{{URL::to('/')}}/storage/{{$post['crawlerImage']}}" alt="" class="single-post-img" style="width:100%" class="my-1">
        @endisset -->


        // FileSystem::write($img_path,$decoded);
                    // $yamlfile['image'] = $url.$key;

    // $img_path = storage_path('app/public/'.$this->file."/images/".$key);

  //$doc = Storage::put($this->file, $yaml . "\n" . $html);

   //$yamlfile['image'] = "./storage/images/" . $key;



   // fetch(newPostIsBeingCreated ? 'publish' : '/{{$user->username}}/saveDraft', {
      //   method: 'POST',
      //   body: formData,
      //   headers: {
      //     'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      //   }
      // }).then(res => res.json()).then((res) => {
      //   console.log(JSON.stringify(res));

      //   if (res.error == false && res.action == 'publish') {
      //     window.localStorage.setItem('publish', 'success');
      //     window.location = '/{{$user->username}}/posts';

      //   } else if (res.error == false && res.action == 'savedToDrafts') {
      //     window.localStorage.setItem('savedToDrafts', 'success');
      //     window.location = '/{{$user->username}}/posts';
      //   }

      // }).catch((err) => {
      //   alert(`Failed with the following message: ${err.message}`);
      // });








      // fetch('send-mail',{
    //   method: 'POST',
    //   body: ContactFormData,
    //   headers: {
    //       'X-CSRF-TOKEN': j('meta[name="csrf-token"]').attr('content')
    //     }
    // }).then(res=>res.json()).then((res)=>{
    //   //console.log(JSON.stringify(res));


    //    if(res.success)
    //   {
    //     document.querySelector('#formFields').reset();
    //     swal({
    //       text: res.success,
    //       icon: "success",
    //     });
    //   }


    //   if(res.name)
    //   {
    //     const nameErrorContainer=document.querySelector('#nameError');
    //     nameErrorContainer.style.display='block';
    //     nameErrorContainer.innerHTML = res.name;
    //   }
    //   else
    //   {
    //     const nameErrorContainer=document.querySelector('#nameError');
    //     nameErrorContainer.style.display='none';
    //     nameErrorContainer.innerHTML = '';
    //   }


    //   if(res.email)
    //   {
    //     const emailErrorContainer=document.querySelector('#emailError');
    //     emailErrorContainer.style.display='block';
    //     emailErrorContainer.innerHTML = res.email;
    //   }
    //   else
    //   {
    //     const emailErrorContainer=document.querySelector('#emailError');
    //     emailErrorContainer.style.display='none';
    //     emailErrorContainer.innerHTML = '';
    //   }


    //   if(res.message)
    //   {
    //     const msgErrorContainer=document.querySelector('#msgError');
    //     msgErrorContainer.style.display='block';
    //     msgErrorContainer.innerHTML = res.message;
    //   }
    //   else
    //   {
    //     const msgErrorContainer=document.querySelector('#msgError');
    //     msgErrorContainer.style.display='none';
    //     msgErrorContainer.innerHTML = "";
    //   }


    // }).catch((err)=>{
    //   alert(`Failed with the following message: ${err.message}`);
    // });





    // fetch('save_settings',{
      //   method: 'POST',
      //   body: formData,
      //   headers: {
      //     'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      //   }
      // }).then(response=>response.json()).then((response)=>{
      //   //console.log(JSON.stringify(response));

      //   if (response.success) {
      //       swal({
      //         text: response.success,
      //         icon: "success",
      //       })

      //       if(response.img_path){
      //          document.querySelector('#user-avatar').src = response.img_path;
      //       }
      //       document.querySelector('#user-name').innerHTML = formData.get('name');
      //       if(formData.get('bio') !==""){
      //          document.querySelector('#user-bio').innerHTML = formData.get('bio');
      //       }else {
      //         document.querySelector('#user-bio').innerHTML = 'Set up a bio about yourself, let other lucid users know you.';
      //       }
           
      //   }

      //   const name = document.querySelector('#fullname');
      //   const email = document.querySelector('#emailError');
      //   const img = document.querySelector('#imgError');
      //   if (response.name){
      //       name.style.display="block"
      //       name.innerHTML = response.name
      //   }else {
      //       name.style.display="none"
      //       name.innerHTML = ''
      //   }

      //   if (response.email){
      //       email.style.display="block"
      //       email.innerHTML = response.email
      //   }else {
      //       email.style.display="none"
      //       email.innerHTML = ''
      //   }

      //   if (response.profileimage){
      //       img.style.display="block"
      //       img.innerHTML = response.profileimage
      //   }else {
      //       img.style.display="none"
      //       img.innerHTML = ''
      //   }
        
      // }).catch((err) => {
      //   alert(`Failed with the following message: ${err.message}`);
      // });



      

<!-- 
<div class="post-content">
  <div class="post-content-body">
    <p class="post-date">{{ $post['date'] }}</p>
    <h3 class="post-title">
      <a class="no-decoration text-dark" href="post/{{$post['slug']}}">{!! $post['title'] !!}</a>
    </h3>
    <p class="post-body">
      {!! $post['body'] !!}
    </p>
  </div>
</div> -->


<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Politics">
  <label class="form-check-label" for="inlineCheckbox1">Politics</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Sports">
  <label class="form-check-label" for="inlineCheckbox1">Sports</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Health">
  <label class="form-check-label" for="inlineCheckbox1">Health</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Technology">
  <label class="form-check-label" for="inlineCheckbox1">Technology</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Music">
  <label class="form-check-label" for="inlineCheckbox1">Music</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#News-Lifestyle">
  <label class="form-check-label" for="inlineCheckbox1">News-Lifestyle</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Movies">
  <label class="form-check-label" for="inlineCheckbox1">Movies</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input tags" type="checkbox" id="inlineCheckbox1" value="#Fitness">
  <label class="form-check-label" for="inlineCheckbox1">Fitness</label>
</div>

// get tags
      const selected = document.querySelectorAll('.tags:checked');
      const selectedTags = Array.from(selected).map(el => el.value);
      console.log(selectedTags);

      // console.log(formData.get('tags'));
      // formData.set('tags', selectedTags);

  <!-- <p>Write a Post</p>
<form method="POST" action="/save-post" enctype="multipart/form-data" class="mb-3">
    @csrf
  <div class="form-row mb-3">
    <div class="col-7">
      <input type="text" name="title" class="form-control" placeholder="Title">
    </div>
    <div class="col-4 offset-md-1 border-dark ">
      <input type="file" name="file" class="" id="customFile" style="display:none">
      <label class="text-muted form-control p-2 w-100" for="customFile"><i class="icon ion-md-add p-1"></i> Add post Image</label>
    </div>
  </div>
  <div class="form-group">
    <textarea type="text" name="body" class="form-control h-25" placeholder="Tell your story"></textarea>
  </div>
  <div class="text-right">
    <button type="submit" class="btn bg-alt text-white">Publish</button>
  </div>
</form> -->


function deletePost(id){
  const deleteForm = document.querySelector('.delete-form');
  const deleteBtn = document.querySelector('button[name="delete"]');
  if(deleteBtn !=null){
    deleteForm.onsubmit = deleteBtn.addEventListener('click',function(e){
      e.preventDefault();

      j.ajaxSetup({
            headers: {
                'X-CSRF-TOKEN': j('meta[name="csrf-token"]').attr('content')
            }
        });

      j.ajax({
          type:'GET',
          url:"{{ route('deletePost',['username'=>'ssfd','id'=>"+ j{id} +"])  }}",
          contentType:false,
          processData:false,
          success:function(data){
            console.log(data);
          }
      })


    });
  }
}



<!--<div class="post-content">
        <div>

        </div>
        <div class="post-content-body">
            <p class="mb-1 font-weight-bold">Lucid-<small class="text-muted">August 22, 2019</small></p>
            <p class="">
                This is a well written article. Interesting and illuminating read. I will be looking forward to more of your work
            </p>
        </div>
    </div> -->


  //   $renamedUserContentFolder = false;
      //   if(Auth::user()->username !== $request->username){
      //     $oldUserPostFolderName = storage_path('app/'.Auth::user()->username);
      //     $oldUserImgFolderName = storage_path('app/public/'.Auth::user()->username);

      //     $FolderName = storage_path('app/'.$request->username);
      //     $newUserImgFolderName = storage_path('app/public/'.$request->username);

      //   if(rename($oldUserPostFolderName, $FolderName) && rename($oldUserImgFolderName, $newUserImgFolderName)){
      //       $renamedUserContentFolder = $request->username;
      //     }else{
      //       $renamedUserContentFolder = false;
      //     }
      // }

    // if($renamedUserContentFolder !== false){
          //   $url = $renamedUserContentFolder."/images/";
          // }


      // if($renamedUserContentFolder !== false){
        //   $pathArr = explode('/',$fullPath);
        //   $fullPath = '/storage/'.Auth::user()->id.'/images//'.end($pathArr);
        // }